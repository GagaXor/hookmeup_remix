// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id    String @id @default(cuid())
  email String @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  password Password?
  notes    Note[]
  role String? @default("USER")
  profile Profile ? 
}

model Password {
  hash String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique

}

model Note {
  id    String @id @default(cuid())
  title String
  body  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Profile {
  id String @id 
  fullName String
  dob DateTime
  city City ? @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  cityId String
  gender String
  phone String
  userType String @default("CLIENT")
  bio String
  escort Escort ?
  user User  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
  media Media[]
  profilePictureUrl String ?
  verification Verification ?
}


model Escort {
  id String @id @default(cuid())    
  sexualOrientation String?
  build String?
  bustSize String?
  occupation String?
  education String?
  smoker Boolean?
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String @unique
  
}

model Country {
  id String @id
  name String
  states State[] 
}

model State {
  id String @id @default(cuid())
  name String
  country Country @relation(fields: [countryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  countryId String
  cities City[]
}

model City {
  id String @id @default(cuid())
  name String
  state State @relation(fields: [stateId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  stateId String
  profile Profile[]
}

model Media{
  id String @id @default(cuid())
  mediaUrl String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String 
}

model Verification {
  id String @id @default(cuid())
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  profileId String @unique
  verified Boolean
  verificationMediaUrl String
  createdAt DateTime @default(now())
}